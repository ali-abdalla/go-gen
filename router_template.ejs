package router_methods

import (
	log "log"
	http "net/http"
	strconv "strconv"

	gin "github.com/gin-gonic/gin"
	gorm "github.com/jinzhu/gorm"
	<% if (guid) {%>uuid "github.com/satori/go.uuid"<% } %>

	model "github.com/hkarim/humhub-api/model"
)

func Install<%=capitalizeName%>Router(db gorm.DB, router *gin.Engine) {

	// GET /<%=name%>
	// GET all <%=name%>
	router.GET("/<%=name%>", func(c *gin.Context) {
		<% if (guid) { %>if guid := c.Query("guid"); guid != "" {
		    var <%=name%> model.<%=capitalizeName%>
		    query := &model.<%=capitalizeName%>{
		      <%=capitalizeName%>Data: model.<%=capitalizeName%>Data{Guid: guid},
		    }
			  db.Where(&query).First(&<%=name%>)
			  c.JSON(http.StatusOK, <%=name%>)
			} else {
			  var <%=name%> []model.<%=capitalizeName%>
			  db.Find(&<%=name%>)
			  c.JSON(http.StatusOK, <%=name%>)
			}<% } else { %>var <%=name%> []model.<%=capitalizeName%>
		db.Find(&<%=name%>)
		c.JSON(http.StatusOK, <%=name%>) <% } %>
	})

	// GET /<%=name%>/:id
	// GET <%=name%> by id
	router.GET("/<%=name%>/:id", func(c *gin.Context) {
		_id := c.Param("id")
		if id, err := strconv.ParseUint(_id, 10, 64); err == nil {
			var <%=name%> model.<%=capitalizeName%>
			query := &model.<%=capitalizeName%>{
				<%=capitalizeName%>Id: model.<%=capitalizeName%>Id{Id: id},
			}
			db.Where(&query).First(&<%=name%>)
			c.JSON(http.StatusOK, <%=name%>)
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})

	// POST /<%=name%>
	// POST new <%=name%> to database
	router.POST("/<%=name%>", func(c *gin.Context) {
		var <%=name%>Post model.<%=capitalizeName%>Post
		if err := c.BindJSON(&<%=name%>Post); err == nil {
			<%=name%> := &model.<%=capitalizeName%>{
				<%=capitalizeName%>Data: <%=name%>Post.<%=capitalizeName%>Data,<% if(trace) { %>
				Trace: <%=name%>Post.Trace,<% } %>
			}
			<% if (guid) { %><%=name%>.Guid = uuid.NewV4().String()<% } %>
			if err := db.Create(&<%=name%>).Error; err != nil {
				c.AbortWithError(http.StatusBadRequest, err)
			} else {
				c.JSON(http.StatusOK, <%=name%>)
			}
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})

}
