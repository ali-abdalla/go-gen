package router

import (
	log "log"
	http "net/http"
	strconv "strconv"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gorm "github.com/jinzhu/gorm"
	<% if (guid) {%>uuid "github.com/satori/go.uuid"<% } %>

	model "github.com/hkarim/humhub-api/model"
)

func Install<%=capitalizeName%>Router(db gorm.DB, router *gin.Engine) {
	GetAll<%=capitalizeName%>(db, router)
	GetById<%=capitalizeName%>(db, router)
	Post<%=capitalizeName%>(db, router)
	Put<%=capitalizeName%>(db, router)
	Delete<%=capitalizeName%>(db, router)
}

func GetAll<%=capitalizeName%>(db gorm.DB, router *gin.Engine) {

	// GET /<%=name%>
	// GET all <%=name%>
	router.GET("/<%=name%>", func(c *gin.Context) {
		<% if (guid) { %>if guid := c.Query("guid"); guid != "" {
		    var <%=name%> model.<%=capitalizeName%>
		    query := &model.<%=capitalizeName%>{
		      <%=capitalizeName%>Data: model.<%=capitalizeName%>Data{Guid: guid},
		    }
			  db.Where(&query).First(&<%=name%>)
			  c.JSON(http.StatusOK, <%=name%>)
			} else {
			  var <%=name%> []model.<%=capitalizeName%>
			  db.Find(&<%=name%>)
			  c.JSON(http.StatusOK, <%=name%>)
			}<% } else { %>var <%=name%> []model.<%=capitalizeName%>
		db.Find(&<%=name%>)
		c.JSON(http.StatusOK, <%=name%>) <% } %>
	})
}

func GetById<%=capitalizeName%>(db gorm.DB, router *gin.Engine) {
	// GET /<%=name%>/:id
	// GET <%=name%> by id
	router.GET("/<%=name%>/:id", func(c *gin.Context) {
		_id := c.Param("id")
		if id, err := strconv.ParseUint(_id, 10, 64); err == nil {
			var <%=name%> model.<%=capitalizeName%>
			query := &model.<%=capitalizeName%>{
				<%=capitalizeName%>Id: model.<%=capitalizeName%>Id{Id: id},
			}
			if err := db.Where(&query).First(&<%=name%>).Error; err == nil {
				c.JSON(http.StatusOK, <%=name%>)
			} else {
				c.AbortWithError(http.StatusNotFound, err)
			}
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})
}

func Post<%=capitalizeName%>(db gorm.DB, router *gin.Engine) {
	// POST /<%=name%>
	// POST new <%=name%> to database
	router.POST("/<%=name%>", func(c *gin.Context) {
		var <%=name%>Data model.<%=capitalizeName%>Data
		if err := c.BindJSON(&<%=name%>Data); err == nil {
			<%=name%> := &model.<%=capitalizeName%>{
				<%=capitalizeName%>Data: <%=name%>Data,
			}
			<% if (guid) { %><%=name%>.Guid = uuid.NewV4().String()<% } %>
			<% if (trace) { %>
				var x_user uint64
				if resp := c.Request.Header.Get(userHeader); resp != "" {
					conv_user, _ := strconv.ParseUint(resp, 10, 64)
					x_user = conv_user
					<%=name%>.Trace.CreatedBy = x_user
					<%=name%>.Trace.UpdatedBy = x_user
					if err := checkData<%=capitalizeName%>(<%=name%>.<%=capitalizeName%>Data); err {
						if err := db.Create(&<%=name%>).Error; err != nil {
							c.AbortWithError(http.StatusBadRequest, err)
						} else {
							c.JSON(http.StatusCreated, <%=name%>)
						}
					} else {
						c.AbortWithStatus(http.StatusBadRequest)
					}
				} else {
					c.AbortWithStatus(http.StatusForbidden)
				}
				<% } else { %>
					if err := db.Create(&<%=name%>).Error; err != nil {
						c.AbortWithError(http.StatusBadRequest, err)
					} else {
						c.JSON(http.StatusOK, <%=name%>)
					}
					<% } %>
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})
}

func Put<%=capitalizeName%>(db gorm.DB, router *gin.Engine) {
	// PUT /<%=name%>
	// Update <%=name%> data by id
	router.PUT("/<%=name%>/:id", func(c *gin.Context) {
		_id := c.Param("id")
		if id, err := strconv.ParseUint(_id, 10, 64); err == nil {
			var <%=name%>Data model.<%=capitalizeName%>Data
			if err := c.BindJSON(&<%=name%>Data); err == nil {
				<%=name%> := &model.<%=capitalizeName%>{
					<%=capitalizeName%>Data: <%=name%>Data,
					<%=capitalizeName%>Id: model.<%=capitalizeName%>Id {Id: id},
				}
				if err := checkData<%=capitalizeName%>(<%=name%>.<%=capitalizeName%>Data); err {
					check<%=capitalizeName%> := &model.<%=capitalizeName%>{
						<%=capitalizeName%>Data: <%=name%>Data,
						<%=capitalizeName%>Id: model.<%=capitalizeName%>Id {Id: id},
					}
					if err := db.First(check<%=capitalizeName%>).Error; err == nil {
						db.Save(&<%=name%>)
						c.JSON(http.StatusOK, <%=name%>)
					} else {
						c.AbortWithStatus(http.StatusNotFound)
					}
				} else {
					c.AbortWithStatus(http.StatusBadRequest)
				}
			}
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})
}

func Delete<%=capitalizeName%>(db gorm.DB, router *gin.Engine) {

	router.DELETE("/<%=name%>/:id", func(c *gin.Context) {
		_id := c.Param("id")
		if id, err := strconv.ParseUint(_id, 10, 64); err == nil {
			<%=name%> := &model.<%=capitalizeName%>{
				<%=capitalizeName%>Id: model.<%=capitalizeName%>Id {Id: id},
			}
			if err := db.First(<%=name%>).Error; err == nil {
				db.Delete(<%=name%>)
				c.AbortWithStatus(http.StatusOK)
			} else {
				c.AbortWithStatus(http.StatusNotFound)
			}
		} else {
			log.Print(err)
			c.AbortWithError(http.StatusBadRequest, err)
		}
	})
}

func checkData<%=capitalizeName%>(data model.<%=capitalizeName%>Data) bool {
	reflectStruct := reflect.ValueOf(data)
	values := make([]interface{}, reflectStruct.NumField())

	for i := 0; i < reflectStruct.NumField(); i++ {
		values[i] = reflectStruct.Field(i).Interface()
		if values[i] == "" {
			return false
		}
	}
	return true
}
